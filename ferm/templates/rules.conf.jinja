# File maintained by salt ferm-formula
# Any changes to this file will be removed
#
# Update pillar: ferm:rules:ingress and ferm:rules:egress
#
{%- from "ferm/map.jinja" import config %}
{%- set has_v6 = config.ip6 %}
{%- set rules = config.rules %}

{%- macro format_action(action) -%}
{%-   if action|upper in ('ACCEPT', 'DROP', 'REJECT', 'LOG', ) -%}
        {{ action | upper }}
{%-   elif action.startswith('LOG ') -%}
        {{ action }}
{%-   else -%}
        jump {{ action }}
{%-   endif -%}
{%- endmacro %}


{%- macro filter_domain(domain) -%}
{%-   if domain in (4, '4', 'inet', 'inet4', 'ip4', 'ipv4') -%}
@if @eq($DOMAIN, ip)
{%-   elif domain in (6, '6', 'inet6', 'ip6', 'ipv6')  -%}
@if @eq($DOMAIN, ip6)
{%-   endif %}
{%- endmacro %}


{%- macro build_rules(rules, chain_prefix, target_key, match_ip, match_port, match_set) %}
    chain {{ chain_prefix }} {
{%-   for rule_id, info in rules|dictsort %}
{%-     set default_action = info.get('action', 'accept') %}
{%-     set protocols = info.get('protocol', 'any').split('/')[0].split(',') %}
{%-     if 'icmp' in protocols %}
{%-         set match_port_ = 'icmp-type' %}
{%-     else %}
{%-         set match_port_ = match_port %}
{%-     endif %}
{%-     set ports = info.get('protocol', 'any').split('/')[-1].split(',') %}
        # {{ rule_id }}
{%-     if '_ip' in info %}
        {{    filter_domain(info['_ip']) }}
{%-     endif %}
{%-     if 'any' in protocols  %}
        interface + {# something is required for @subchain to work #}
{%-     else  %}
        proto ({{ protocols|join(' ') }}) {# space #}
{%-       if 'any' not in ports %}{{match_port_}} ({{ ports|join(' ') }}) {% endif %}
{%-     endif %}@subchain "{{chain_prefix}}_{{ rule_id }}" {
{%-     for target_info in info.get(target_key, []) %}
{%-       set comment = '' %}
{%-       set action = default_action %}
{%-       if target_info is mapping %}
{%-         set action = target_info.get('action', default_action) %}
{%-         set comment = target_info.get('comment') %}
{%-         if 'ip' in target_info %}
{%-           set target = target_info['ip'] %}
{%-         elif 'pillar' in target_info %}
{%-           set target = salt['pillar.get'](target_info['pillar']) %}
{%-           set comment = "pillar: {}".format(target_info['pillar']) %}
{%-         elif 'set' in target_info %}
{%-           set target = None %}
{%-           set extra = 'mod set set {} {}'.format(target_info['set'], match_set) %}
{%-         else %}
{%-           set target = [] %}
{%-         endif %}
{%-         set comment = target_info.get('comment', comment) %}
{%-         if comment %}
            # {{ comment }}
{%-         endif %}
{%-       else %}
{%-         set target = target_info %}
{%-       endif %}
{%-       if '_ip' in target_info %}
            {{    filter_domain(target_info['_ip']) }}
{%-       endif %}
{%-       if target is none %}
            {{    extra }}
{%-       elif 'any' not in target %}
            {{    match_ip }} @ipfilter((
{%-       if target is string -%}
            {{      target }}
{%-        else %}
                {{  target | join('\n') | indent(16) }}
            {# do indent the closing parents, but only in this case #}
{%-       endif -%}
            ))
{%- else %}
           {# No match, just a target, indent it #}
{%- endif %} {{ format_action(action) }};
{%- endfor %}
        }
{%-   endfor %}
    }
{%- endmacro %}

{#- XXX: check for reflexive rules? #}
{%- set ingress = rules.get('ingress') %}
{%- if ingress %}
# ingress rules
domain (ip {%- if has_v6 %} ip6 {%- endif %})
table filter {
{%- if config.accept_loopback %}
    chain INPUT interface lo ACCEPT;
{%- endif %}
    chain INPUT jump ingress;
{{- build_rules(ingress, 'ingress', 'source', 'saddr', 'dport', 'src') }}
}
{%- endif %}
{%- set egress = rules.get('egress') %}
{%- if egress %}
# egress rules
domain (ip ip6)
table filter {
{%- if config.accept_loopback %}
    chain OUTPUT outerface lo ACCEPT;
{%- endif %}
    chain OUTPUT jump egress;
{{- build_rules(egress, 'egress', 'destination', 'daddr', 'dport', 'dst') }}
}
{%- endif %}
