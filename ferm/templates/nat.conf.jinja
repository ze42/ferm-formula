# File maintained by salt ferm-formula
# Any changes to this file will be removed
#
# Update pillar: ferm:rules:prerouting and ferm:rules:postrouting
#
{%- from "ferm/map.jinja" import config %}
{%- set has_v6 = config.ip6 %}
{%- set rules = config.rules %}

{%- set builtin_actions = (
        'ACCEPT', 'DROP', 'LOG',
        'DNAT', 'NETMAP', 'REDIRECT',
        'SNAT', 'MASQUERADE', 'NETMAP',
) %}

{% set matching_info = {
    'preroute': {
        'prefix': 'pre',
        'iface': {
            'name': 'iface',
            'option': 'interface ',
        },
        'addr': {
            'name': 'destination',
            'options': {
               'ip': 'saddr',
               'set': 'src',
            },
        },
    },
    'postroute': {
        'prefix': 'pst',
        'iface': {
            'name': 'oface',
            'option': 'outerface ',
        },
        'addr': {
            'name': 'source',
            'options': {
               'ip': 'saddr',
               'set': 'src',
            },
        },
    },
}
%}

{%- macro format_action(action) -%}
{%-   if action.partition(' ')[0]|upper in builtin_actions -%}
        {{ action.partition(' ')[0]|upper }}{{ ''.join(action.partition(' ')[1:]) }}
{%-   else -%}
        jump {{ action }}
{%-   endif -%}
{%- endmacro %}

{%- macro lst_or_str(data, lst_indent) %}
{%-     if data is string -%}
            {{ data }}
{%-        else %}
                {#- this is an open/close indent from exactly `lst_indent` #}
                {{- ('', '')|join('\n')|indent(lst_indent) }}
                {{- target|join('\n')|indent(lst_indent) }}
                {{- ('', '')|join('\n')|indent(lst_indent) }}
{%-       endif -%}
{%- endmacro %}

{#- info: match info ; rule: current rule we try to match -#}
{%- macro format_protocol(match_info, rule) -%}
{%-     set info = rule.get('protocol', 'any') %}
{%-     set protocols = rule.get('protocol', 'any').split('/')[0].split(',') %}
{%-     if 'any' not in protocols %}{# if any, nothing... so we only have the `not in` part -#}
        proto ({{ protocols|join(' ') }}) {# -#}
{%-         set ports = rule.get('protocol', 'any').split('/')[-1].split(',') %}
{%-         if 'any' not in ports %} 
{%-             if 'icmp' in protocols -%}
                    icmp-type
{%-             else -%}
                    dport
{%-             endif %}
                {#- #} ({{ ports|join(' ') }})
{%-         endif %}
{%-     endif %}
        {#- #} {{ format_action(rule['action']) }};
{%- endmacro %}

{%- macro format_addr(match_info, name, rule) %}
{%-     set info_lst = rule.get(match_info['addr']['name']) %}
{%-     if info_lst is string %}
{%-         set info_lst = [{'ip': info_lst}] %}
{%-     endif %}
{%-     if info_lst %}
{%-         for info in info_lst %}
{%-             if info is string %}
{%-                 set info = {'ip': info} %}
{%-             endif %}
{%-             if 'comment' in info %}
        # {{ info['comment'] }}
{%-             endif %}
{%-             if '_ip' in info %}
        {{    filter_domain(info['_ip']) }}
{%-             endif %}
{%-             if 'ip' in info %}
        {{ match_info['addr']['options']['ip'] }} @ipfilter({{ lst_or_str(info['ip']) }})
{%-             elif 'pillar' in info %}
        # pillar: {{ info['pillar'] }}
        {{ match_info['addr']['options']['ip'] }} @ipfilter({{ lst_or_str(salt['pillar.get'](info['pillar'])) }})
{%-             elif 'set' in info %}
{%-                 set extra = 'mod set set {} {}'.format(info['set'], match_info['addr']['options']['set']) %}
{%-             else %}
        comment "No-addr-match"
{%-             endif %}
{%-         endfor %}
          @subchain "{{ match_info['prefix'] }}_addr_{{ name }}" {
              {{ format_protocol(match_info, rule) }}
          }
{%-     else  %}
          # No address to match
          {{ format_protocol(match_info, rule) }}
{%-     endif %}
{%- endmacro %}

{%- macro format_iface(match_info, name, rule) %}
{%-     set iface = rule.get(match_info['iface']['name']) %}
{%-     if iface %}
      {{ match_info['iface']['option'] }} ({{ lst_or_str(iface, 10) }})
{%-     endif %}
{{- format_addr(match_info, name, rule) }}
{%- endmacro %}


{%- macro filter_domain(domain) -%}
{%-   if domain in (4, '4', 'inet', 'inet4', 'ip4', 'ipv4') -%}
@if @eq($DOMAIN, ip)
{%-   elif domain in (6, '6', 'inet6', 'ip6', 'ipv6')  -%}
@if @eq($DOMAIN, ip6)
{%-   endif %}
{%- endmacro %}


{%- macro build_rules(rules, chain_prefix) %}
    chain {{ chain_prefix }} {
{%-   for rule_id, info in rules|dictsort %}
      # {{ rule_id }}
{{-       format_iface(matching_info[chain_prefix], rule_id, info) }}
{%-   endfor %}
    }
{%- endmacro %}

{%- set prerouting = rules.get('prerouting') %}
{%- if prerouting %}
# prerouting rules
domain (ip)
table nat {
    chain PREROUTING jump preroute;
{{- build_rules(prerouting, 'preroute') }}
}
{%- endif %}
{%- set postrouting = rules.get('postrouting') %}
{%- if postrouting %}
# postrouting rules
domain (ip)
table nat {
    chain POSTROUTING jump postroute;
{{- build_rules(postrouting, 'postroute') }}
}
{%- endif %}
